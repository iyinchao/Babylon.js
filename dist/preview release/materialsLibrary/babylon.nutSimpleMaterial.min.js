var __extends=this&&this.__extends||(function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var i in n)n.hasOwnProperty(i)&&(e[i]=n[i])};return function(n,i){function t(){this.constructor=n}e(n,i),n.prototype=null===i?Object.create(i):(t.prototype=i.prototype,new t)}})(),__decorate=this&&this.__decorate||function(e,n,i,t){var o,a=arguments.length,r=a<3?n:null===t?t=Object.getOwnPropertyDescriptor(n,i):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,i,t);else for(var f=e.length-1;f>=0;f--)(o=e[f])&&(r=(a<3?o(r):a>3?o(n,i,r):o(n,i))||r);return a>3&&r&&Object.defineProperty(n,i,r),r},BABYLON;!(function(e){var n=(function(e){function n(){var n=e.call(this)||this;return n.DIFFUSE=!1,n.CLIPPLANE=!1,n.ALPHATEST=!1,n.DEPTHPREPASS=!1,n.POINTSIZE=!1,n.FOG=!1,n.NORMAL=!1,n.UV1=!1,n.UV2=!1,n.VERTEXCOLOR=!1,n.VERTEXALPHA=!1,n.NUM_BONE_INFLUENCERS=0,n.BonesPerMesh=0,n.INSTANCES=!1,n.USE_BONE_TEXTURE=!1,n.SUPPORT_FLOAT_TEXTURE=!1,n.rebuild(),n}return __extends(n,e),n})(e.MaterialDefines),i=(function(i){function t(n,t){var o=i.call(this,n,t)||this;return o.diffuseColor=new e.Color3(1,1,1),o._disableLighting=!1,o._maxSimultaneousLights=4,o}return __extends(t,i),t.prototype.needAlphaBlending=function(){return this.alpha<1},t.prototype.needAlphaTesting=function(){return!1},t.prototype.getAlphaTestTexture=function(){return null},t.prototype.isReadyForSubMesh=function(i,t,o){if(this.isFrozen&&this._wasPreviouslyReady&&t.effect)return!0;t._materialDefines||(t._materialDefines=new n);var a=t._materialDefines,r=this.getScene();if(!this.checkReadyOnEveryCall&&t.effect&&this._renderId===r.getRenderId())return!0;var f=r.getEngine(),l=f.getCaps();if(a._areTexturesDirty&&(a._needUVs=!1,r.texturesEnabled&&this._diffuseTexture&&e.StandardMaterial.DiffuseTextureEnabled)){if(!this._diffuseTexture.isReady())return!1;a._needUVs=!0,a.DIFFUSE=!0}if(e.MaterialHelper.PrepareDefinesForMisc(i,r,!1,this.pointsCloud,this.fogEnabled,a),a._needNormals=e.MaterialHelper.PrepareDefinesForLights(r,i,a,!1,this._maxSimultaneousLights,this._disableLighting),e.MaterialHelper.PrepareDefinesForFrameBoundValues(r,f,a,!!o),e.MaterialHelper.PrepareDefinesForAttributes(i,a,!0,!1),i.useBones&&i.computeBonesUsingShaders&&i.skeleton&&(a.NUM_BONE_INFLUENCERS=i.numBoneInfluencers,a.BonesPerMesh=i.skeleton.bones.length+1,a.USE_BONE_TEXTURE=!0),l.textureFloat&&(a.SUPPORT_FLOAT_TEXTURE=!0),a.isDirty){a.markAsProcessed(),r.resetCachedMaterial();var s=new e.EffectFallbacks;a.FOG&&s.addFallback(1,"FOG"),e.MaterialHelper.HandleFallbacksForShadows(a,s,this.maxSimultaneousLights),a.NUM_BONE_INFLUENCERS>0&&s.addCPUSkinningFallback(0,i);var d=[e.VertexBuffer.PositionKind];a.NORMAL&&d.push(e.VertexBuffer.NormalKind),a.UV1&&d.push(e.VertexBuffer.UVKind),a.UV2&&d.push(e.VertexBuffer.UV2Kind),a.VERTEXCOLOR&&d.push(e.VertexBuffer.ColorKind),e.MaterialHelper.PrepareAttributesForBones(d,i,a,s),e.MaterialHelper.PrepareAttributesForInstances(d,a);var c=f.webGLVersion>1?"nutSimple300":"nutSimple100",u=a.toString(),v=["world","view","viewProjection","vEyePosition","vLightsType","vDiffuseColor","vFogInfos","vFogColor","pointSize","vDiffuseInfos","vClipPlane","diffuseMatrix"],x=["diffuseSampler"],m=new Array;i.useBones&&i.computeBonesUsingShaders&&i.skeleton&&(x.push("boneSampler"),1===f.webGLVersion&&v.push("boneSamplerSize")),e.MaterialHelper.PrepareUniformsAndSamplersList({uniformsNames:v,uniformBuffersNames:m,samplers:x,defines:a,maxSimultaneousLights:this.maxSimultaneousLights}),t.setEffect(r.getEngine().createEffect(c,{attributes:d,uniformsNames:v,uniformBuffersNames:m,samplers:x,defines:u,fallbacks:s,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this._maxSimultaneousLights-1}},f),a)}return!(!t.effect||!t.effect.isReady())&&(this._renderId=r.getRenderId(),this._wasPreviouslyReady=!0,!0)},t.prototype.bindForSubMesh=function(n,i,t){var o=this.getScene(),a=o.getEngine(),r=t._materialDefines;if(r){var f=t.effect;if(f){if(this._activeEffect=f,this.bindOnlyWorldMatrix(n),this._activeEffect.setMatrix("viewProjection",o.getTransformMatrix()),i&&i.useBones&&i.computeBonesUsingShaders&&i.skeleton){var l=i.skeleton.getTransformMatrices(i),s=0;if(r.SUPPORT_FLOAT_TEXTURE){var s=e.Tools.CeilingPOT(Math.ceil(Math.sqrt(l.length/16*4))),d=new Float32Array(new ArrayBuffer(s*s*4*4));d.set(l),this._boneTexture?this._boneTexture.update(d):this._boneTexture=e.RawTexture.CreateRGBATexture(d,s,s,o,!1,!1,e.Texture.NEAREST_SAMPLINGMODE,e.Engine.TEXTURETYPE_FLOAT)}else{var s=e.Tools.CeilingPOT(Math.ceil(Math.sqrt(2*l.length))),d=new Uint8Array(new ArrayBuffer(s*s*4));e.Tools.convertMatricesToRGBA8(l,d,l.length/16),this._boneTexture?this._boneTexture.update(d):this._boneTexture=e.RawTexture.CreateRGBATexture(d,s,s,o,!1,!1,e.Texture.NEAREST_SAMPLINGMODE,e.Engine.TEXTURETYPE_UNSIGNED_INT)}1===a.webGLVersion&&this._activeEffect.setInt("boneSamplerSize",s),this._activeEffect.setTexture("boneSampler",this._boneTexture)}this._mustRebind(o,f)&&(this._diffuseTexture&&e.StandardMaterial.DiffuseTextureEnabled&&(this._activeEffect.setTexture("diffuseSampler",this._diffuseTexture),this._activeEffect.setFloat2("vDiffuseInfos",this._diffuseTexture.coordinatesIndex,this._diffuseTexture.level),this._activeEffect.setMatrix("diffuseMatrix",this._diffuseTexture.getTextureMatrix())),e.MaterialHelper.BindClipPlane(this._activeEffect,o),this.pointsCloud&&this._activeEffect.setFloat("pointSize",this.pointSize),e.MaterialHelper.BindEyePosition(f,o)),this._activeEffect.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*i.visibility),o.lightsEnabled&&!this.disableLighting&&e.MaterialHelper.BindLights(o,i,this._activeEffect,r,this.maxSimultaneousLights),o.fogEnabled&&i.applyFog&&o.fogMode!==e.Scene.FOGMODE_NONE&&this._activeEffect.setMatrix("view",o.getViewMatrix()),e.MaterialHelper.BindFogParameters(o,i,this._activeEffect),this._afterBind(i,this._activeEffect)}}},t.prototype.getAnimatables=function(){var e=[];return this._diffuseTexture&&this._diffuseTexture.animations&&this._diffuseTexture.animations.length>0&&e.push(this._diffuseTexture),e},t.prototype.getActiveTextures=function(){var e=i.prototype.getActiveTextures.call(this);return this._diffuseTexture&&e.push(this._diffuseTexture),e},t.prototype.hasTexture=function(e){return!!i.prototype.hasTexture.call(this,e)||this.diffuseTexture===e},t.prototype.dispose=function(e){this._diffuseTexture&&this._diffuseTexture.dispose(),this._boneTexture&&this._boneTexture.dispose(),i.prototype.dispose.call(this,e)},t.prototype.clone=function(n){var i=this;return e.SerializationHelper.Clone((function(){return new t(n,i.getScene())}),this)},t.prototype.serialize=function(){var n=e.SerializationHelper.Serialize(this);return n.customType="BABYLON.NutSimpleMaterial",n},t.prototype.getClassName=function(){return"NutSimpleMaterial"},t.Parse=function(n,i,o){return e.SerializationHelper.Parse((function(){return new t(n.name,i)}),n,i,o)},__decorate([e.serializeAsTexture("diffuseTexture")],t.prototype,"_diffuseTexture",void 0),__decorate([e.serializeAsTexture("boneTexture")],t.prototype,"_boneTexture",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsTexturesDirty")],t.prototype,"diffuseTexture",void 0),__decorate([e.serializeAsColor3("diffuse")],t.prototype,"diffuseColor",void 0),__decorate([e.serialize("disableLighting")],t.prototype,"_disableLighting",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsLightsDirty")],t.prototype,"disableLighting",void 0),__decorate([e.serialize("maxSimultaneousLights")],t.prototype,"_maxSimultaneousLights",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsLightsDirty")],t.prototype,"maxSimultaneousLights",void 0),t})(e.PushMaterial);e.NutSimpleMaterial=i})(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.nutSimple100VertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n\n#if NUM_BONE_INFLUENCERS>0\nattribute vec4 matricesIndices;\nattribute vec4 matricesWeights;\n#if NUM_BONE_INFLUENCERS>4\nattribute vec4 matricesIndicesExtra;\nattribute vec4 matricesWeightsExtra;\n#endif\n#ifdef USE_BONE_TEXTURE\nuniform sampler2D boneSampler;\nuniform int boneSamplerSize;\n#ifdef SUPPORT_FLOAT_TEXTURE\nmat4 getBoneMatrix(const in float i)\n{\nfloat j=i*4.0;\nfloat x=mod(j,float(boneSamplerSize));\nfloat y=floor(j/float(boneSamplerSize));\nfloat dx=1.0/float(boneSamplerSize);\nfloat dy=1.0/float(boneSamplerSize);\ny=dy*(y+0.5);\nvec4 v1=texture2D(boneSampler,vec2(dx*(x+0.5),y));\nvec4 v2=texture2D(boneSampler,vec2(dx*(x+1.5),y));\nvec4 v3=texture2D(boneSampler,vec2(dx*(x+2.5),y));\nvec4 v4=texture2D(boneSampler,vec2(dx*(x+3.5),y));\nmat4 bone=mat4(v1,v2,v3,v4);\nreturn bone;\n}\n#else\nfloat decodeRGBA2Float (float dx,float X,float Y,float index) {\nfloat i0=index*2.0+0.5;\nfloat i1=index*2.0+1.5;\n\nvec4 rgba0=texture2D(boneSampler,vec2(dx*(X+i0),Y));\nvec4 rgba1=texture2D(boneSampler,vec2(dx*(X+i1),Y));\nfloat frac_=dot(rgba0,vec4(1.0,1.0/255.0,1.0/65025.0,1.0/160581375.0));\nfloat decimal_=floor(rgba1.r*255.0+0.5)+floor(rgba1.g*255.0+0.5)*255.0+floor(rgba1.b*255.0+0.5)*65025.0;\nfloat f=(decimal_+frac_)*(rgba1.a*2.0-1.0);\nreturn f;\n}\nmat4 getBoneMatrix(const in float i) {\nfloat j=i*32.0;\nfloat x=mod(j,float(boneSamplerSize));\nfloat y=floor(j/float(boneSamplerSize));\nfloat dx=1.0/float(boneSamplerSize);\nfloat dy=1.0/float(boneSamplerSize);\ny=dy*(y+0.5);\nfloat f00=decodeRGBA2Float(dx,x,y,0.0);\nfloat f01=decodeRGBA2Float(dx,x,y,1.0);\nfloat f02=decodeRGBA2Float(dx,x,y,2.0);\nfloat f03=decodeRGBA2Float(dx,x,y,3.0);\nfloat f10=decodeRGBA2Float(dx,x,y,4.0);\nfloat f11=decodeRGBA2Float(dx,x,y,5.0);\nfloat f12=decodeRGBA2Float(dx,x,y,6.0);\nfloat f13=decodeRGBA2Float(dx,x,y,7.0);\nfloat f20=decodeRGBA2Float(dx,x,y,8.0);\nfloat f21=decodeRGBA2Float(dx,x,y,9.0);\nfloat f22=decodeRGBA2Float(dx,x,y,10.0);\nfloat f23=decodeRGBA2Float(dx,x,y,11.0);\nfloat f30=decodeRGBA2Float(dx,x,y,12.0);\nfloat f31=decodeRGBA2Float(dx,x,y,13.0);\nfloat f32=decodeRGBA2Float(dx,x,y,14.0);\nfloat f33=decodeRGBA2Float(dx,x,y,15.0);\nmat4 bone=mat4( vec4(f00,f01,f02,f03),\nvec4(f10,f11,f12,f13),\nvec4(f20,f21,f22,f23),\nvec4(f30,f31,f32,f33));\nreturn bone;\n}\n#endif\n#endif\n#endif\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#ifdef USE_BONE_TEXTURE\n#if NUM_BONE_INFLUENCERS>0\nmat4 influence;\ninfluence=getBoneMatrix(matricesIndices[0])*matricesWeights[0];\n#if NUM_BONE_INFLUENCERS>1\ninfluence+=getBoneMatrix(matricesIndices[1])*matricesWeights[1];\n#endif \n#if NUM_BONE_INFLUENCERS>2\ninfluence+=getBoneMatrix(matricesIndices[2])*matricesWeights[2];\n#endif \n#if NUM_BONE_INFLUENCERS>3\ninfluence+=getBoneMatrix(matricesIndices[3])*matricesWeights[3];\n#endif \n#if NUM_BONE_INFLUENCERS>4\ninfluence+=getBoneMatrix[int(matricesIndicesExtra[0])]*matricesWeightsExtra[0];\n#endif \n#if NUM_BONE_INFLUENCERS>5\ninfluence+=getBoneMatrix[int(matricesIndicesExtra[1])]*matricesWeightsExtra[1];\n#endif \n#if NUM_BONE_INFLUENCERS>6\ninfluence+=getBoneMatrix[int(matricesIndicesExtra[2])]*matricesWeightsExtra[2];\n#endif \n#if NUM_BONE_INFLUENCERS>7\ninfluence+=getBoneMatrix[int(matricesIndicesExtra[3])]*matricesWeightsExtra[3];\n#endif \nfinalWorld=finalWorld*influence;\n#endif\n#endif\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif \n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\n\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n",BABYLON.Effect.ShadersStore.nutSimple100PixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif \n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,baseColor.a*alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}",BABYLON.Effect.ShadersStore.nutSimple300VertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\n\n#if NUM_BONE_INFLUENCERS>0\nattribute vec4 matricesIndices;\nattribute vec4 matricesWeights;\n#if NUM_BONE_INFLUENCERS>4\nattribute vec4 matricesIndicesExtra;\nattribute vec4 matricesWeightsExtra;\n#endif\n#ifdef USE_BONE_TEXTURE\nuniform sampler2D boneSampler;\n#ifdef SUPPORT_FLOAT_TEXTURE\nmat4 getBoneMatrix(const float i)\n{\nivec2 boneTextureSize=textureSize(boneSampler,0);\nfloat j=i*4.0;\nfloat x=mod(j,float(boneTextureSize.x));\nfloat y=floor(j/float(boneTextureSize.y));\nfloat dx=1.0/float(boneTextureSize.x);\nfloat dy=1.0/float(boneTextureSize.y);\ny=dy*(y+0.5);\nvec4 v1=texture(boneSampler,vec2(dx*(x+0.5),y));\nvec4 v2=texture(boneSampler,vec2(dx*(x+1.5),y));\nvec4 v3=texture(boneSampler,vec2(dx*(x+2.5),y));\nvec4 v4=texture(boneSampler,vec2(dx*(x+3.5),y));\nmat4 bone=mat4(v1,v2,v3,v4);\nreturn bone;\n}\n#else\nfloat decodeRGBA2Float (float dx,float X,float Y,float index) {\nfloat i0=index*2.0+0.5;\nfloat i1=index*2.0+1.5;\n\nvec4 rgba0=texture(boneSampler,vec2(dx*(X+i0),Y));\nvec4 rgba1=texture(boneSampler,vec2(dx*(X+i1),Y));\nfloat frac_=dot(rgba0,vec4(1.0,1.0/255.0,1.0/65025.0,1.0/160581375.0));\nfloat decimal_=floor(rgba1.r*255.0+0.5)+floor(rgba1.g*255.0+0.5)*255.0+floor(rgba1.b*255.0+0.5)*65025.0;\nfloat f=(decimal_+frac_)*(rgba1.a*2.0-1.0);\nreturn f;\n}\nmat4 getBoneMatrix(const float i) {\nivec2 boneTextureSize=textureSize(boneSampler,0);\nfloat j=i*32.0;\nfloat x=mod(j,float(boneTextureSize.x));\nfloat y=floor(j/float(boneTextureSize.y));\nfloat dx=1.0/float(boneTextureSize.x);\nfloat dy=1.0/float(boneTextureSize.y);\ny=dy*(y+0.5);\nfloat f00=decodeRGBA2Float(dx,x,y,0.0);\nfloat f01=decodeRGBA2Float(dx,x,y,1.0);\nfloat f02=decodeRGBA2Float(dx,x,y,2.0);\nfloat f03=decodeRGBA2Float(dx,x,y,3.0);\nfloat f10=decodeRGBA2Float(dx,x,y,4.0);\nfloat f11=decodeRGBA2Float(dx,x,y,5.0);\nfloat f12=decodeRGBA2Float(dx,x,y,6.0);\nfloat f13=decodeRGBA2Float(dx,x,y,7.0);\nfloat f20=decodeRGBA2Float(dx,x,y,8.0);\nfloat f21=decodeRGBA2Float(dx,x,y,9.0);\nfloat f22=decodeRGBA2Float(dx,x,y,10.0);\nfloat f23=decodeRGBA2Float(dx,x,y,11.0);\nfloat f30=decodeRGBA2Float(dx,x,y,12.0);\nfloat f31=decodeRGBA2Float(dx,x,y,13.0);\nfloat f32=decodeRGBA2Float(dx,x,y,14.0);\nfloat f33=decodeRGBA2Float(dx,x,y,15.0);\nmat4 bone=mat4( vec4(f00,f01,f02,f03),\nvec4(f10,f11,f12,f13),\nvec4(f20,f21,f22,f23),\nvec4(f30,f31,f32,f33));\nreturn bone;\n}\n#endif\n#endif\n#endif\n\n#include<instancesDeclaration>\nuniform mat4 view;\nuniform mat4 viewProjection;\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\nvoid main(void) {\n#include<instancesVertex>\n#ifdef USE_BONE_TEXTURE\n#if NUM_BONE_INFLUENCERS>0\nmat4 influence;\ninfluence=getBoneMatrix(matricesIndices[0])*matricesWeights[0];\n#if NUM_BONE_INFLUENCERS>1\ninfluence+=getBoneMatrix(matricesIndices[1])*matricesWeights[1];\n#endif \n#if NUM_BONE_INFLUENCERS>2\ninfluence+=getBoneMatrix(matricesIndices[2])*matricesWeights[2];\n#endif \n#if NUM_BONE_INFLUENCERS>3\ninfluence+=getBoneMatrix(matricesIndices[3])*matricesWeights[3];\n#endif \n#if NUM_BONE_INFLUENCERS>4\ninfluence+=getBoneMatrix[int(matricesIndicesExtra[0])]*matricesWeightsExtra[0];\n#endif \n#if NUM_BONE_INFLUENCERS>5\ninfluence+=getBoneMatrix[int(matricesIndicesExtra[1])]*matricesWeightsExtra[1];\n#endif \n#if NUM_BONE_INFLUENCERS>6\ninfluence+=getBoneMatrix[int(matricesIndicesExtra[2])]*matricesWeightsExtra[2];\n#endif \n#if NUM_BONE_INFLUENCERS>7\ninfluence+=getBoneMatrix[int(matricesIndicesExtra[3])]*matricesWeightsExtra[3];\n#endif \nfinalWorld=finalWorld*influence;\n#endif\n#endif\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif \n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n#ifdef DIFFUSE\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n\n#include<clipPlaneVertex>\n\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n\n#ifdef VERTEXCOLOR\n\n#endif\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n}\n",BABYLON.Effect.ShadersStore.nutSimple300PixelShader="precision highp float;\n\nuniform vec3 vEyePosition;\nuniform vec4 vDiffuseColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform vec2 vDiffuseInfos;\n#endif\n#include<clipPlaneFragmentDeclaration>\n\n#include<fogFragmentDeclaration>\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n#ifdef DIFFUSE\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#include<depthPrePass>\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef NORMAL\nvec3 normalW=normalize(vNormalW);\n#else\nvec3 normalW=vec3(1.0,1.0,1.0);\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\nfloat shadow=1.;\nfloat glossiness=0.;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif \n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor,0.0,1.0)*baseColor.rgb;\n\nvec4 color=vec4(finalDiffuse,baseColor.a*alpha);\n#include<fogFragment>\ngl_FragColor=color;\n}";